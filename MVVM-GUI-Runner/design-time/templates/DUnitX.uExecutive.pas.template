<t:template xmlns:t="https://github.com/SeanBDurkin/DUnitX/template"
  filename="DUnitX.uExecutive.pas" path-base="relative">unit DUnitX.uExecutive;
// The contents of this unit are dynamically generated by the DUnitX Wizard.
interface
uses DUnitX.BaseExecutive;

function AcquireExecutive: IExecutive;

implementation


uses Classes, DUnitX.SBD.uServiceProvider, DUnitX.TestFramework, DUnitX.TestRunner,
     DUnitX.ViewModel_Tree, DUnitX.viewModel_LoggerContainer;

type
TExecutive = class( TBaseExecutive)
  protected
    procedure RegisterTestFixtures;    override;
    procedure RegisterServices;        override;
  end;


function AcquireExecutive: IExecutive;
begin
result := TExecutive.Create
end;

procedure TExecutive.RegisterServices;
begin
// Dynamic content
<t:register-tree-providers />
<!-- like .... FServices.RegisterServiceClass( IVisualTestSuiteTree, MyClass); -->

<t:register-tree-logger-container-factories />
<!-- like .... FServices.RegisterServiceClass( ILoggerContainerFactory, MyLogger); -->

<t:if-has-logger-container-factories>
FServices.ServiceAffinity[ ILoggerContainerFactory, ''] := afCooperative
</t:if-has-logger-container-factories>
end;

procedure TExecutive.RegisterTestFixtures;
begin
  Add code here to register your test fixtures! ...
  
end;


end.</t:template>